#!/usr/bin/env python
import argparse
import os

def base_noext(path):
    """returns basename(), not including the file extention"""
    return os.path.splitext(os.path.basename(path))[0]

def get_itpfiles(topol_path):
    topol_dir = os.path.split(topol_path)[:-1] # path to dir containing topol.top
    toppar_dir = os.path.join(*topol_dir, 'toppar')
    return [f for f in os.listdir(toppar_dir) if not 'forcefield' in f]

def get_moltype(known, unknown, index):
    """Returns the moltype of a molecule by comparing atom-by-atom

    Parameters
    ==========
        known  dict          labeled molecule types with example atoms
        unown  mda.Universe  atoms with unknown moltype
        index  int           index of first atom of unknown molecule

    Returns
    =======
        moltype  str  name of first matching type
    """
    max_atom = len(unknown.atoms)
    check_attrs = 'name', 'type', 'resname'

    for moltype, mol in known.items():
        num_atoms = len(mol.atoms)

        if num_atoms + index > max_atom:
            continue

        mol_equal = True
        for mol_index in range(num_atoms):
            unk_index = index + mol_index
            unk_atom = unknown.atoms[unk_index]
            mol_atom = mol.atoms[mol_index]
            atom_equal = True
            for attr in check_attrs:
                if getattr(mol_atom, attr) != getattr(unk_atom, attr):
                    atom_equal = False
                    break
            if not atom_equal:
                mol_equal = False
                break

        if mol_equal:
            return moltype

    raise KeyError(f"Unknown molecule type starting at {index}")

def write_itp(filename, entries, toppar_dir):
    def print_multiline(lines, file):
        for line in lines:
            print(line, file=file)

    with open(filename, 'w') as itp_file:
        # header
        output = [
            ";;",
            ";; Generated by Nathan Kern",
            ";;",
            ";; Correspondence: nak317@lehigh.edu",
            ";;"
        ]
        print_multiline(output, itp_file)

        # includes
        written = []
        for moltype, _ in entries:
            if not moltype in written:
                print(f'#include "toppar/{moltype}.itp"', file=itp_file)
                written.append(moltype)

        # no idea what the point of this section is
        output = ["[ system ]", "; Name", "Title"]
        print_multiline(output, itp_file)

        # molecule section
        output = ["[ molecules ]", "; Compound  #mols"]
        print_multiline(output, itp_file)

        field_widths = [max(len(str(field)) for field in column)
            for column in zip(*entries)]
        line_tpl = f'{{:{field_widths[0]}s}}  {{:{field_widths[1]}d}}'

        for entry in entries:
            print(line_tpl.format(*entry), file=itp_file)

helpmsg = 'Writes GROMACS GRO and TOP where molecule order is consistent with a given PSF'
parser = argparse.ArgumentParser(description=helpmsg)

parser.add_argument('-t', nargs=1, default=['topol.top'], metavar='TOP',
    help="GROMACS topology file")
parser.add_argument('-og', nargs=1, default=['fixed.gro'], metavar='GRO',
    help='output GRO (default: fixed.gro)')
parser.add_argument('-ot', nargs=1, default=['fixed.top'], metavar='TOP',
    help='output TOP (default: fixed.top)')
parser.add_argument('psf', type=argparse.FileType('r'),
    help="CHARMM PSF with desired order")
parser.add_argument('coor', type=argparse.FileType('r'),
    help="Input coordinate file to use when writing GRO")

args = parser.parse_args()

# nargs=1 really ought to unpack the list
for arg in ('t', 'og', 'ot'):
    setattr(args, arg, getattr(args, arg)[0])

itpfiles = get_itpfiles(args.t)

# no idea why, but MDA doesn't like reading PDB as a stream
coor_filename = args.coor.name
args.coor.close()

import MDAnalysis as mda

u_psf = mda.Universe(args.psf)

# MDA fails to handle itp files located in a directory other than .
prevdir = os.getcwd()
toppar_dir = os.path.join(os.path.dirname(itpfiles[0]), 'toppar')
os.chdir(toppar_dir)
molecules = {base_noext(topfile): mda.Universe(topfile) for topfile in itpfiles}
os.chdir(prevdir)

molecule_entries = [] # pairs of [moltype, count]
entry = None # current molecule entry

psf_index = mol_index = 0
n_atoms = len(u_psf.atoms)
while psf_index < n_atoms:
    psf_atom = u_psf.atoms[psf_index]

    moltype = get_moltype(molecules, u_psf, psf_index)
    mol = molecules[moltype]

    if entry is None:
        entry = [moltype, 1]
    elif moltype == entry[0]:
        entry[1] += 1
    else:
        molecule_entries.append(entry)
        entry = [moltype, 1]

    psf_index += len(mol.atoms)

# don't forget last entry
if entry is not None:
    molecule_entries.append(entry)

write_itp(args.ot, molecule_entries, toppar_dir)

new_gro = mda.Universe(args.ot, coor_filename, topology_format='ITP')
new_gro.atoms.write(args.og)
